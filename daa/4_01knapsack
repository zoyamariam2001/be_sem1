import time

def knapsack(items, weights, profits, capacity):
    n = len(items)
    dp = [[0] * (capacity + 1) for _ in range(n)]
    selected_items = [0] * n

    for i in range(n):
        for w in range(capacity + 1):
            if i == 0:
                if weights[i] <= w:
                    dp[i][w] = profits[i]
            else:
                without_this_item = dp[i - 1][w]
                if weights[i] <= w:
                    with_this_item = profits[i] + dp[i - 1][w - weights[i]]
                    dp[i][w] = max(with_this_item, without_this_item)
                else:
                    dp[i][w] = without_this_item

    # Traceback to find the selected items
    w = capacity
    for i in range(n - 1, -1, -1):
        if i == 0 and dp[i][w] > 0:
            selected_items[i] = 1
        elif dp[i][w] != dp[i - 1][w]:
            selected_items[i] = 1
            w -= weights[i]

    max_profit = dp[n - 1][capacity]

    # Print the selected items
    print("Selected items:")
    for i, item in enumerate(items):
        if selected_items[i]:
            print(f"Item {item}, Weight: {weights[i]}, Profit: {profits[i]}")

    return max_profit, dp


if __name__ == "__main__":
    #items = [1, 2, 3, 4, 5]
    #weights = [2, 3, 4, 5, 9] #alt- 2 3 4 5  #alt2-11 12 13
    #profits = [3, 4, 5, 8, 10] #alt- 3 4 5 6   #alt2-70 20 50
    #capacity = 10     #alt-5 #alt2-30
    n=int(input("Enter total number of items: "))
    items= list(map(int,input("Enter the item numbers: ").split()))
    profits= list(map(int,input("Enter the profits: ").split()))
    weights= list(map(int,input("Enter the weights: ").split()))
    capacity=int(input("Enter knapsack size: "))
    st = time.time()
    max_profit, dp = knapsack(items, weights, profits, capacity)

    # Print the maximum profit and the dynamic programming matrix
    print(f"Maximum Profit: {max_profit}")
    print("Dynamic Programming Matrix:")
    for row in dp:
        print(row)
    et = time.time()
    elapsed_time = et - st
    print('Execution time of program: ', elapsed_time, 'seconds')
