import pandas as pd
import numpy as np
from sklearn import metrics
#####################
df = pd.read_csv("diabetes.csv")
####################
df
#####################
df.info()
####################
df.shape
########################
df.head()
#######################
df.isnull().sum()
########################
df.columns
###########################
# Separate features (X) and the target variable (y)

X = df.drop(columns=['Outcome'])
Y = df["Outcome"]
######################
X
##############
Y
##################
#data scaling
# Standardize the features (scaling is important for KNN)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaledX = scaler.fit_transform(X)
########################
#training model
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(scaledX, Y, test_size=0.2, random_state=42)
  
#######################
#Implement K-Nearest Neighbors algorithm
from sklearn.neighbors import KNeighborsClassifier
k = 3   #You can choose the number of neighbors
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,Y_train)
##########################
from sklearn.neighbors import KNeighborsClassifier
k = 3   #You can choose the number of neighbors
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train,Y_train)
#######################
#Make prediction
y_pred = knn.predict(X_test)
######################
conf_matrix = metrics.confusion_matrix(Y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)
#######################
accuracy = metrics.accuracy_score(Y_test, y_pred)
print("Accuracy:", accuracy)
#####################
error_rate = 1 - accuracy
print("Error Rate:", error_rate)
#########################
precision = metrics.precision_score(Y_test, y_pred)
print("Precision:", precision)
     
#######################
recall = metrics.recall_score(Y_test, y_pred)
print("Recall:", recall)
######################
f1 = metrics.f1_score(Y_test, y_pred)
print("F1 Score:", f1)
#######################
cr = metrics.classification_report(Y_test,y_pred)
print("Classification report: \n\n", cr)
######################
