import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
#########################
df = pd.read_csv("sales_data_sample.csv", sep=",", encoding='Latin-1')
df
########################
df.info()
######################
df.describe()
#######################
df.isnull().sum()
########################
# Removing Null Value

df.dropna(subset=['ADDRESSLINE2'], inplace=True)
df.dropna(subset=['STATE'], inplace=True)
df.dropna(subset=['TERRITORY'], inplace=True)
##########################
df.isnull().sum()
############################
df.describe()
##########################
df.dtypes
###############################
X = df.iloc[: , [3,4]].values
##########################
#WCSS is the sum of the squared distance between each point and the centroid in a cluster
# Initialize an empty list to store the within-cluster sum of squares (WCSS)
wcss = []
#######################
# Determine the WCSS for a range of cluster numbers (e.g., 1 to 10)
for i in range(1,11):
  kmeans = KMeans(n_clusters= i, random_state=2)
  kmeans.fit(X)
  wcss.append(kmeans.inertia_)
     
#########################
# Plot the WCSS values to identify the elbow point
plt.plot(range(1,11), wcss, 'bx-')
plt.title("Elbow Method")
plt.xlabel("Number of Cluster(Kvalue)")
plt.ylabel("WCSS")
plt.show()
     
############################
scale = StandardScaler()
scaled_data = scale.fit_transform(X)
#######################
# Based on the plot, visually determine the optimal number of clusters
# where the WCSS starts to level off (the "elbow" point)
# Implement K-Means clustering with the optimal number of clusters
# Let's assume you found the optimal number of clusters to be 'k'
k = 3  # Replace with the number you determined from the elbow method
 
############################
kmeans = KMeans(n_clusters=3,random_state = 0)
cluster_lables = kmeans.fit_predict(scaled_data)
#############################
wcss = []

for i in range(1,11):
  kmeans = KMeans(n_clusters= i, random_state=2)
  kmeans.fit(scaled_data)
  wcss.append(kmeans.inertia_)
##############################
# Plot the WCSS values to identify the elbow point
plt.plot(range(1,11), wcss,'bx-')
plt.title("Elbow Method")
plt.xlabel("Number of Cluster(Kvalue)")
plt.ylabel("WCSS")
plt.show()
##################################
#Conclusion:
#For K-means Clustering the optimal number of clusters are 3
#######################################
